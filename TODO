performance:
- i think there will be no anonymous variables
  to implement binder spilitting i will simply create new predicateliterals with their own domains
  if we have for example a predicate p(X,Y) where X is relevant and Y is irrelevant
  ill create a new predicate p(X) matching all p(X,_) thats easier and fits better into the current design
- literals in the body could be ordered by some heuristic see reference in dlv paper
- dont use tons of small vectors in domains instead put all values into 1 big vector
  - domains
  - conditional literals

code:
- write a better main app
- if a conflicting integrity constraint is found grounding could be stopped (and not just exit(0))
- use more c++ exceptions
- fix the preprocessing for functionsymbols

documentation:
- write doxygen doc

testing:
- write tests for all allowed language constructs !!!
- test conformance with lparse/gringo

smodelsoutput:
- the current smodelsoutput is a mess
  - there is no error handling using incompatible language constructs
    will result in strange behaviour => c++ exception should solve this
  - aggregates could be handled a bit better there are introduced a lot
    useless symbols in some cases (but thats not dramatically cause clasp's
    preprocessor seems to be able to remove them)
  - there is no distinction between COUNT and SUM aggregates (in case 
    there is no distinction at all every aggregate even MIN, MAX, ... is
    handled like a SUM aggregate :) )
    again it makes no difference for clasp if SUM or COUNT aggregates are
    used cause clasp will detect if all weights are 1
  - i believe that there is an easy transformation from MIN, MAX aggregates 
    to normalrules this transformation should be applied in the output

