performance:
- i think there will be no anonymous variables
  to implement binder spilitting i will simply create new predicateliterals with their own domains
  if we have for example a predicate p(X,Y) where X is relevant and Y is irrelevant
  ill create a new predicate p(X) matching all p(X,_) thats easier and fits better into the current design
- literals in the body could be ordered by some heuristic see reference in dlv paper
- dont use tons of small vectors in domains instead put all values into 1 big vector
  - domains
  - conditional literals
- optimize memory consumtion/handling in output classes
- dont create literaldependency graphs for ground rules
- implement a bottom-up strategy to ground the rules!!!

code:
- write a better main app
- find a better way (a. :- a. ? ) to state that no answer set exists
- use more c++ exceptions

documentation:
- write doxygen doc

testing:
- write tests for all allowed language constructs !!!
- test conformance with lparse/gringo

