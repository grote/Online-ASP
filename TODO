performance:
- to implement binder spilitting create new rules (rewriting)
- literals in the body could be ordered by some heuristic see reference in dlv paper
- dont use tons of small vectors in domains instead put all values into 1 big vector
  - domains
  - conditional literals
- optimize memory consumtion/handling in output classes
  - dont use new/delete for all the output objects everytime a rule is grounded
- dont create literaldependency graphs for ground rules
- improve the checking phase
- optimize datastructures (in view of memoryconsumption)

code:
- write a better main app
- find a better way (a. :- a. ? ) to state that no answer set exists
- use more c++ exceptions

documentation:
- write doxygen doc

testing:
- write tests for all allowed language constructs !!!
- test conformance with lparse/gringo

todo:
- handle classical negation in iclaspoutput

